// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PipeLine.Backend.Context;

#nullable disable

namespace PipeLine.Backend.Migrations
{
    [DbContext(typeof(PipeLineMySqlContext))]
    partial class PipeLineMySqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("93233682-756a-4ca3-8759-e4ec37182f29"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("8dfc4275-dee6-4da0-adf8-d9b1afaf9299"),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            UserId = new Guid("7fc4fdae-4413-4114-b085-40e1eaa80142"),
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingInstanceModels.ChargingInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ChargingPortId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("DesiredEndPercentage")
                        .HasColumnType("int");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EndPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("StartingPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingPortId");

                    b.HasIndex("DeviceId");

                    b.ToTable("ChargingInstances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("59d4f463-e491-4894-bfd8-91162d032cfe"),
                            ChargingPortId = new Guid("a91026c8-1dc2-4311-adf5-49402703d000"),
                            DesiredEndPercentage = 100,
                            DeviceId = new Guid("4e40698d-022f-4a3f-8a91-c36372e5ac99"),
                            End = new DateTime(2024, 2, 10, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            EndPercentage = 100,
                            Start = new DateTime(2024, 2, 10, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            StartingPercentage = 40
                        },
                        new
                        {
                            Id = new Guid("de29d60e-ce40-4bcd-b4f5-e6f2378cebd0"),
                            ChargingPortId = new Guid("b20b2723-5dc1-411c-8a30-6a0655a8481a"),
                            DesiredEndPercentage = 100,
                            DeviceId = new Guid("81fd7101-d207-42b3-97c2-bfc2f67c9bda"),
                            End = new DateTime(2024, 2, 11, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            EndPercentage = 100,
                            Start = new DateTime(2024, 2, 11, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            StartingPercentage = 50
                        },
                        new
                        {
                            Id = new Guid("afd7de1c-cb15-4fab-8576-68effd4b7504"),
                            ChargingPortId = new Guid("a91026c8-1dc2-4311-adf5-49402703d000"),
                            DesiredEndPercentage = 100,
                            DeviceId = new Guid("97840601-53d2-47a9-9062-ed774142658d"),
                            End = new DateTime(2024, 2, 12, 19, 15, 0, 0, DateTimeKind.Unspecified),
                            EndPercentage = 100,
                            Start = new DateTime(2024, 2, 12, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingPercentage = 60
                        },
                        new
                        {
                            Id = new Guid("dfc2430e-0125-4981-a109-2fca390ff039"),
                            ChargingPortId = new Guid("8f7f6784-4e76-4fba-9f44-e014fc3f5940"),
                            DesiredEndPercentage = 99,
                            DeviceId = new Guid("bd3cb4d1-4d28-44d5-bd28-dc167f8e121f"),
                            End = new DateTime(2024, 2, 14, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            EndPercentage = 99,
                            Start = new DateTime(2024, 2, 13, 22, 45, 0, 0, DateTimeKind.Unspecified),
                            StartingPercentage = 70
                        },
                        new
                        {
                            Id = new Guid("2388c138-a8ea-48da-8140-5c8d87da6adf"),
                            ChargingPortId = new Guid("d2dea098-a325-4a2f-923e-a581ddd4791b"),
                            DesiredEndPercentage = 85,
                            DeviceId = new Guid("26940568-4647-49c7-80c7-e96ccc884ea1"),
                            End = new DateTime(2024, 2, 15, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            EndPercentage = 82,
                            Start = new DateTime(2024, 2, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            StartingPercentage = 10
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingStationModels.ChargingPortModel.ChargingPort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChargingStationId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBeingUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCharging")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("MaxChargingSpeed")
                        .HasColumnType("double");

                    b.Property<int>("PortNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.ToTable("ChargingPorts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a91026c8-1dc2-4311-adf5-49402703d000"),
                            ChargingStationId = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("b20b2723-5dc1-411c-8a30-6a0655a8481a"),
                            ChargingStationId = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("8f7f6784-4e76-4fba-9f44-e014fc3f5940"),
                            ChargingStationId = new Guid("2f3820bc-ba7d-487b-897e-12d2c5041ce5"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("d2dea098-a325-4a2f-923e-a581ddd4791b"),
                            ChargingStationId = new Guid("2f3820bc-ba7d-487b-897e-12d2c5041ce5"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("ef0f137a-37bb-45a6-b830-460467f74ceb"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("2d1b1640-aae9-49db-aa61-c9331e6b1b7d"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("838d79f1-89a9-4cc7-a992-febbb7804b14"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("11b58460-2e0d-4d58-a6f5-39a3945a6289"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 4
                        },
                        new
                        {
                            Id = new Guid("c2efcc7e-b977-4c8f-ad61-a2a93432a11c"),
                            ChargingStationId = new Guid("625307d2-d501-41e5-8fdf-77d151bdd260"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("1dcebbab-37a2-4473-9aff-dbc89f5f843f"),
                            ChargingStationId = new Guid("625307d2-d501-41e5-8fdf-77d151bdd260"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("08bcd0e3-5f9c-48f7-b345-a22b4c1961cb"),
                            ChargingStationId = new Guid("625307d2-d501-41e5-8fdf-77d151bdd260"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("206213c1-7437-4340-aedc-91d5ba483d77"),
                            ChargingStationId = new Guid("e1621f6d-a8d5-4065-a537-0d2aa0adee96"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("ab0d6c6e-f47f-4ae1-b77c-beb93b136842"),
                            ChargingStationId = new Guid("e1621f6d-a8d5-4065-a537-0d2aa0adee96"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("d972ac98-7f68-4690-a947-ba2f59d7a14c"),
                            ChargingStationId = new Guid("e1621f6d-a8d5-4065-a537-0d2aa0adee96"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("6e934b8f-e509-4376-be7e-71f16309e7fe"),
                            ChargingStationId = new Guid("e1621f6d-a8d5-4065-a537-0d2aa0adee96"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 4
                        },
                        new
                        {
                            Id = new Guid("8a5a4cba-d12d-4353-92c1-d60eefdaa712"),
                            ChargingStationId = new Guid("4db1ba58-c788-47cb-819c-08da571e5978"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("21176d38-9fbb-41e0-8a51-638250daaf40"),
                            ChargingStationId = new Guid("4db1ba58-c788-47cb-819c-08da571e5978"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("e726c61a-30d2-4b58-a8a1-ab23750d6250"),
                            ChargingStationId = new Guid("4fd34718-3872-4bf1-8fb5-5b30849fc80e"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("cebbe124-3172-40f5-bc7a-b420a9e65459"),
                            ChargingStationId = new Guid("4fd34718-3872-4bf1-8fb5-5b30849fc80e"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("01d024a5-fe51-4419-a872-1a19f98db4c7"),
                            ChargingStationId = new Guid("4fd34718-3872-4bf1-8fb5-5b30849fc80e"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("494aebb3-23d3-4d91-99f8-7f86c60f5ea3"),
                            ChargingStationId = new Guid("4fd34718-3872-4bf1-8fb5-5b30849fc80e"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 4
                        },
                        new
                        {
                            Id = new Guid("a05290a1-01fe-489a-b233-3063ab451048"),
                            ChargingStationId = new Guid("74178acf-f8d4-4c2b-b55c-6f136b13bc39"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("445cba27-5324-4b2d-a00d-3d12f0a32645"),
                            ChargingStationId = new Guid("74178acf-f8d4-4c2b-b55c-6f136b13bc39"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("cbfa84da-a918-4f6e-ae7c-2319fbdc911a"),
                            ChargingStationId = new Guid("74178acf-f8d4-4c2b-b55c-6f136b13bc39"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("b42e7da5-cbb1-407f-9e1e-0bfa290db559"),
                            ChargingStationId = new Guid("0d46cb77-0134-4850-99ec-8ac8d7105c26"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("dd8dd71b-2961-449a-860d-dfef294d2a8d"),
                            ChargingStationId = new Guid("0d46cb77-0134-4850-99ec-8ac8d7105c26"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("c503e753-9388-4cd2-bb34-78ba2cc352e1"),
                            ChargingStationId = new Guid("0d46cb77-0134-4850-99ec-8ac8d7105c26"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("82a4a1a6-210e-4c0e-b96f-b9d0109acd59"),
                            ChargingStationId = new Guid("a57aff6e-a64c-4938-9a2c-974fc2505780"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("68de7fec-ae57-43c3-920f-c976d9c1b464"),
                            ChargingStationId = new Guid("a57aff6e-a64c-4938-9a2c-974fc2505780"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("1c1351ab-a67b-4f64-9859-8a6403e6ef95"),
                            ChargingStationId = new Guid("a57aff6e-a64c-4938-9a2c-974fc2505780"),
                            IsBeingUsed = true,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("d128636e-95c4-4728-acc8-0468d02f54f7"),
                            ChargingStationId = new Guid("a57aff6e-a64c-4938-9a2c-974fc2505780"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 4
                        },
                        new
                        {
                            Id = new Guid("eb59229f-a0d4-49a3-a1cc-f3504451ace1"),
                            ChargingStationId = new Guid("91b1377a-33b8-4bf7-943c-8299d7f78343"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.2,
                            PortNumber = 1
                        },
                        new
                        {
                            Id = new Guid("f11dac41-e9c0-4395-9e29-9aa65d4cee85"),
                            ChargingStationId = new Guid("91b1377a-33b8-4bf7-943c-8299d7f78343"),
                            IsBeingUsed = false,
                            IsCharging = true,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.6000000000000001,
                            PortNumber = 2
                        },
                        new
                        {
                            Id = new Guid("fd342c7a-e418-4480-8dfb-e3c8611cdcdf"),
                            ChargingStationId = new Guid("91b1377a-33b8-4bf7-943c-8299d7f78343"),
                            IsBeingUsed = true,
                            IsCharging = true,
                            IsDisabled = true,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 3
                        },
                        new
                        {
                            Id = new Guid("ad6fab12-1c99-426e-a201-bc8e14e75b74"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 45
                        },
                        new
                        {
                            Id = new Guid("d1abc777-fa3d-425d-ada7-503c5de6b20c"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 46
                        },
                        new
                        {
                            Id = new Guid("530e70de-8bdc-4037-8276-69ab27f71484"),
                            ChargingStationId = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            IsBeingUsed = false,
                            IsCharging = false,
                            IsDisabled = false,
                            MaxChargingSpeed = 1.5,
                            PortNumber = 47
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingStationModels.ChargingStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ChargingStations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            Address = "101 Budapest Blvd",
                            Latitude = 47.498010000000001,
                            Longitude = 19.039909999999999,
                            Name = "Budapest Micromobility Hub - West"
                        },
                        new
                        {
                            Id = new Guid("2f3820bc-ba7d-487b-897e-12d2c5041ce5"),
                            Address = "45 Keleti út, Budapest",
                            Latitude = 47.503909999999998,
                            Longitude = 19.116569999999999,
                            Name = "Budapest Micromobility Hub - East"
                        },
                        new
                        {
                            Id = new Guid("b3cab32d-4d07-4f9f-ad73-00d1ab6f909f"),
                            Address = "12 Tisza Street, Szeged",
                            Latitude = 46.253,
                            Longitude = 20.148,
                            Name = "Szeged Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("625307d2-d501-41e5-8fdf-77d151bdd260"),
                            Address = "90 Debrecen Ring",
                            Latitude = 47.531599999999997,
                            Longitude = 21.627300000000002,
                            Name = "Debrecen Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("e1621f6d-a8d5-4065-a537-0d2aa0adee96"),
                            Address = "87 Miskolc Avenue",
                            Latitude = 48.103000000000002,
                            Longitude = 20.777999999999999,
                            Name = "Miskolc Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("4db1ba58-c788-47cb-819c-08da571e5978"),
                            Address = "55 Pécs Drive",
                            Latitude = 46.072699999999998,
                            Longitude = 18.232299999999999,
                            Name = "Pécs Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("4fd34718-3872-4bf1-8fb5-5b30849fc80e"),
                            Address = "33 Győr Center",
                            Latitude = 47.6875,
                            Longitude = 17.650400000000001,
                            Name = "Győr Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("74178acf-f8d4-4c2b-b55c-6f136b13bc39"),
                            Address = "72 Nyíregyháza Street",
                            Latitude = 47.955399999999997,
                            Longitude = 21.716699999999999,
                            Name = "Nyíregyháza Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("0d46cb77-0134-4850-99ec-8ac8d7105c26"),
                            Address = "23 Kecskemét Way",
                            Latitude = 46.906199999999998,
                            Longitude = 19.691299999999998,
                            Name = "Kecskemét Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("a57aff6e-a64c-4938-9a2c-974fc2505780"),
                            Address = "88 Vienna Central",
                            Latitude = 48.208199999999998,
                            Longitude = 16.373799999999999,
                            Name = "Vienna Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("91b1377a-33b8-4bf7-943c-8299d7f78343"),
                            Address = "102 Berlin Platz",
                            Latitude = 52.520000000000003,
                            Longitude = 13.404999999999999,
                            Name = "Berlin Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("c8c8281f-79b4-4a8a-b930-2c7af38d4e7b"),
                            Address = "21 Bratislava Square",
                            Latitude = 48.148600000000002,
                            Longitude = 17.107700000000001,
                            Name = "Bratislava Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("dba2e8e4-6d61-49af-b74a-4b9d927d0b2e"),
                            Address = "77 Prague Center",
                            Latitude = 50.075499999999998,
                            Longitude = 14.437799999999999,
                            Name = "Prague Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("f1e8c45b-2a91-4ff8-b3ec-24b2781c9d24"),
                            Address = "63 Brno Main Street",
                            Latitude = 49.195099999999996,
                            Longitude = 16.6068,
                            Name = "Brno Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("1783ac8e-96fb-47c0-8c74-7bcac28cf383"),
                            Address = "12 Cluj Avenue",
                            Latitude = 46.7712,
                            Longitude = 23.6236,
                            Name = "Cluj-Napoca Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("5a9d3f31-c85d-47b1-9d8e-8e80e4a0943e"),
                            Address = "90 Zagreb Boulevard",
                            Latitude = 45.814999999999998,
                            Longitude = 15.9819,
                            Name = "Zagreb Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("eb8c3c7e-7044-4f32-9483-18a2a5f10ed9"),
                            Address = "54 Ljubljana Road",
                            Latitude = 46.056899999999999,
                            Longitude = 14.505800000000001,
                            Name = "Ljubljana Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("4e5f4cf4-8ed7-491f-b18e-7dbeed52b219"),
                            Address = "33 Kaposvár Ring",
                            Latitude = 46.359400000000001,
                            Longitude = 17.782699999999998,
                            Name = "Kaposvár Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("e8949cc0-566a-423c-beca-ef749acd972d"),
                            Address = "11 Fehérvár Way",
                            Latitude = 47.186,
                            Longitude = 18.4221,
                            Name = "Székesfehérvár Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("21aecd38-fae4-4f9b-b634-bb50ccaa32d8"),
                            Address = "77 Tatabánya Route",
                            Latitude = 47.584000000000003,
                            Longitude = 18.4039,
                            Name = "Tatabánya Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("4c4f3e6e-19d0-42e1-885f-35ec2e39fd1d"),
                            Address = "45 Eger Main Road",
                            Latitude = 47.902500000000003,
                            Longitude = 20.377199999999998,
                            Name = "Eger Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("b5f85c22-9d87-4e5b-bf56-45a1dc0bfa9a"),
                            Address = "34 Kárász Street, Szeged",
                            Latitude = 46.253,
                            Longitude = 20.141400000000001,
                            Name = "Szeged Micromobility Hub - Belváros"
                        },
                        new
                        {
                            Id = new Guid("7c414209-c0f1-4ef2-bc4d-863deec95bf2"),
                            Address = "22 Torontál tér, Szeged",
                            Latitude = 46.249600000000001,
                            Longitude = 20.172799999999999,
                            Name = "Szeged Micromobility Hub - Újszeged"
                        },
                        new
                        {
                            Id = new Guid("e5bfb6da-4d5e-4c7c-9bcb-8b8dbf9a1a64"),
                            Address = "58 Szombathely Road",
                            Latitude = 47.230699999999999,
                            Longitude = 16.6218,
                            Name = "Szombathely Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("340e8c31-6f52-4e7f-9f43-c2c1b9b9add4"),
                            Address = "23 Veszprém Avenue",
                            Latitude = 47.093299999999999,
                            Longitude = 17.9115,
                            Name = "Veszprém Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("9cb9a098-3cfb-46dc-bd72-4f2a938323f7"),
                            Address = "14 Békéscsaba Ring",
                            Latitude = 46.683399999999999,
                            Longitude = 21.088699999999999,
                            Name = "Békéscsaba Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("bb0fdbc1-cc97-4601-9c81-ace35cf1aaba"),
                            Address = "66 Sopron Street",
                            Latitude = 47.681699999999999,
                            Longitude = 16.584499999999998,
                            Name = "Sopron Micromobility Hub"
                        },
                        new
                        {
                            Id = new Guid("2a466d50-82c3-4e64-9d79-bdf59fe2f25b"),
                            Address = "35 Zalaegerszeg Boulevard",
                            Latitude = 46.844999999999999,
                            Longitude = 16.8416,
                            Name = "Zalaegerszeg Micromobility Hub"
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("char(36)");

                    b.Property<double?>("BatteryCapacity")
                        .HasColumnType("double");

                    b.Property<double?>("BatteryVoltage")
                        .HasColumnType("double");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<double?>("MaxChargingSpeed")
                        .HasColumnType("double");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Devices");

                    b.HasDiscriminator().HasValue("Device");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ErrorTicketModels.ErrorTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChargingStationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.ToTable("ErrorTickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1683a4ca-a195-4ca6-a4cb-2ee28d3ade3d"),
                            ChargingStationId = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            Description = "Port 2 does not work.",
                            IsSolved = false
                        },
                        new
                        {
                            Id = new Guid("cd1cbbad-bcfb-443b-b4b5-8751a7942d6c"),
                            ChargingStationId = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            Description = "Port 3 is physically damaged and cannot be used.",
                            IsSolved = false
                        },
                        new
                        {
                            Id = new Guid("723878fd-f94b-4e42-af02-a6cafb58eb21"),
                            ChargingStationId = new Guid("734aa62b-dcaa-4815-a659-24d1fcaa3b18"),
                            Description = "No power at the charging station",
                            IsSolved = true
                        },
                        new
                        {
                            Id = new Guid("b6105591-b25b-4c10-a402-772ec48b9b82"),
                            ChargingStationId = new Guid("2f3820bc-ba7d-487b-897e-12d2c5041ce5"),
                            Description = "Multiple ports are damaged",
                            IsSolved = false
                        },
                        new
                        {
                            Id = new Guid("40018d28-d733-4589-a319-b320a66d3029"),
                            ChargingStationId = new Guid("2f3820bc-ba7d-487b-897e-12d2c5041ce5"),
                            Description = "Some people vandalised multiple ports",
                            IsSolved = true
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ca47adf-c0ad-4eb8-9dc9-29b14f75af80",
                            Email = "tamastest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tamás",
                            LastName = "Teszt",
                            LockoutEnabled = false,
                            NormalizedEmail = "TAMASTEST@GMAIL.COM",
                            NormalizedUserName = "TAMASTESTER",
                            PasswordHash = "AQAAAAIAAYagAAAAECP4TkmP22zofsbX4RkL37IOP3/mWad2k+iKtmIFOBl+qXo0g/TUmKGHY+47JAbf1g==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50d77837-1e20-4bdc-8864-fdcf18cf7a60",
                            TwoFactorEnabled = false,
                            UserName = "TamasTester"
                        },
                        new
                        {
                            Id = new Guid("93233682-756a-4ca3-8759-e4ec37182f29"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df1ae909-2089-40c9-b3fb-181e16819561",
                            Email = "patiproba@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Patrícia",
                            LastName = "Próba",
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIPROBA@GMAIL.COM",
                            NormalizedUserName = "PATIPROBA",
                            PasswordHash = "AQAAAAIAAYagAAAAEGBwpxQ3hJPWxYd9VdlQfS4Sg1OXRsEmo/C7adQJCubHijSu0iHrAwvinWe0bIf5uQ==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fe6be20-d8d4-4797-8a2e-0507f8611d6d",
                            TwoFactorEnabled = false,
                            UserName = "PatiProba"
                        },
                        new
                        {
                            Id = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e7d899e-317d-4533-8303-b6f0a083bd57",
                            Email = "bbence@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Bence",
                            LastName = "Beállítás",
                            LockoutEnabled = false,
                            NormalizedEmail = "BBENCE@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB+WUk/xUbn+gov4uD7Ej8Q3pz3rM6cdI8eSKFOFJmyq5Jo1TLTFByB+qIXyvemqLw==",
                            PhoneNumber = "111222333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b868f53-84cc-4460-b645-e4597e4aae94",
                            TwoFactorEnabled = false,
                            UserName = "BenceB"
                        },
                        new
                        {
                            Id = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fc32e0d-5b1f-450a-858f-33d6b74f2296",
                            Email = "rekareg@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Réka",
                            LastName = "Regisztráció",
                            LockoutEnabled = false,
                            NormalizedEmail = "REKAREG@GMAIL.COM",
                            NormalizedUserName = "REKAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDm5OMzv9xnDJmKz4kJjrgjKhGMc18VV035gwoWSzLPBLD5hYqftx43dKJt7z4kxA==",
                            PhoneNumber = "444555666",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e78722f4-6b8a-4c07-a758-36aa55dd29f8",
                            TwoFactorEnabled = false,
                            UserName = "RekaR"
                        },
                        new
                        {
                            Id = new Guid("8dfc4275-dee6-4da0-adf8-d9b1afaf9299"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a7fe70c-cd0d-48bf-84eb-806d17c629ff",
                            Email = "zoliz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Zoltán",
                            LastName = "Zárás",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZOLIZ@GMAIL.COM",
                            NormalizedUserName = "ZOLIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEAceATwexw6a/dZ1VsxRGgfxnlAoiKZoG3pXM1UkpyAsq09BIa2fQvKXBRb6qqOKXg==",
                            PhoneNumber = "777888999",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbc99d98-1559-4bf8-a4d8-92a8d7931267",
                            TwoFactorEnabled = false,
                            UserName = "ZoliZ"
                        },
                        new
                        {
                            Id = new Guid("7fc4fdae-4413-4114-b085-40e1eaa80142"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c24dddba-85a6-4a33-9c79-a30254a1c605",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFPpwA+MJoUPWxOzrOxvkrztwBzkhNG9Vvg4j/id6W7LS+B4yxKeAvnVRboFlJcrEA==",
                            PhoneNumber = "7777777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed5e6c2-e282-44e1-84e8-fbfddd72c6dd",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.EBike", b =>
                {
                    b.HasBaseType("PipeLine.Shared.Models.DeviceModels.Device");

                    b.Property<bool>("DetachableBattery")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("EBike");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01239c68-890a-4186-b115-1bde2639063c"),
                            ApplicationUserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            BatteryCapacity = 13000.0,
                            BatteryVoltage = 35.0,
                            DeviceType = 0,
                            Manufacturer = "ENGWE",
                            MaxChargingSpeed = 2.0,
                            Model = "EP-2 Pro",
                            Name = "Gyárvárosi Cruiser",
                            DetachableBattery = true
                        },
                        new
                        {
                            Id = new Guid("97840601-53d2-47a9-9062-ed774142658d"),
                            ApplicationUserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            BatteryCapacity = 16000.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 0,
                            Manufacturer = "ENGWE",
                            MaxChargingSpeed = 2.5,
                            Model = "Engine Pro",
                            Name = "Napi Ingázó",
                            DetachableBattery = true
                        },
                        new
                        {
                            Id = new Guid("d59c2bdf-b80c-491a-ab25-590edb690df4"),
                            ApplicationUserId = new Guid("93233682-756a-4ca3-8759-e4ec37182f29"),
                            BatteryCapacity = 10000.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 0,
                            Manufacturer = "HIMO",
                            MaxChargingSpeed = 0.59999999999999998,
                            Model = "Z20",
                            Name = "Kompakt Zöld",
                            DetachableBattery = false
                        },
                        new
                        {
                            Id = new Guid("7a05a19d-1395-449e-afd6-6c4322fb0dd8"),
                            ApplicationUserId = new Guid("93233682-756a-4ca3-8759-e4ec37182f29"),
                            BatteryCapacity = 15000.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 0,
                            Manufacturer = "ADO",
                            MaxChargingSpeed = 0.40000000000000002,
                            Model = "DECE 300",
                            Name = "Terepvadász",
                            DetachableBattery = true
                        },
                        new
                        {
                            Id = new Guid("4e40698d-022f-4a3f-8a91-c36372e5ac99"),
                            ApplicationUserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            BatteryCapacity = 17000.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 0,
                            Manufacturer = "Fiido",
                            MaxChargingSpeed = 0.69999999999999996,
                            Model = "M1 Pro",
                            Name = "Túrázó M1",
                            DetachableBattery = false
                        },
                        new
                        {
                            Id = new Guid("cbed7941-6f04-4086-9a3e-8f46c9f91477"),
                            ApplicationUserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            BatteryCapacity = 12000.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 0,
                            Manufacturer = "TENWAYS",
                            MaxChargingSpeed = 0.65000000000000002,
                            Model = "CGO800S",
                            Name = "Stílusos Városi",
                            DetachableBattery = false
                        },
                        new
                        {
                            Id = new Guid("26940568-4647-49c7-80c7-e96ccc884ea1"),
                            ApplicationUserId = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            BatteryCapacity = 14400.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 0,
                            Manufacturer = "HIMO",
                            MaxChargingSpeed = 0.5,
                            Model = "C26",
                            Name = "Csendes Keringő",
                            DetachableBattery = false
                        },
                        new
                        {
                            Id = new Guid("eafabb49-4083-4de4-8bd7-d092b27007ee"),
                            ApplicationUserId = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            BatteryCapacity = 16000.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 0,
                            Manufacturer = "ADO",
                            MaxChargingSpeed = 0.69999999999999996,
                            Model = "A26",
                            Name = "Hegyi Roham",
                            DetachableBattery = false
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.EScooter", b =>
                {
                    b.HasBaseType("PipeLine.Shared.Models.DeviceModels.Device");

                    b.Property<bool>("IsFoldable")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("EScooter");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83cefd82-f987-4471-9293-5dd401931f0a"),
                            ApplicationUserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            BatteryCapacity = 12400.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 1,
                            Manufacturer = "Xiaomi",
                            MaxChargingSpeed = 0.5,
                            Model = "Mi Electric Scooter Pro 2",
                            Name = "Városi Villám",
                            IsFoldable = true
                        },
                        new
                        {
                            Id = new Guid("0eb8c9cd-475a-438d-ae3c-21884ea90bcc"),
                            ApplicationUserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            BatteryCapacity = 15300.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 1,
                            Manufacturer = "Segway",
                            MaxChargingSpeed = 0.59999999999999998,
                            Model = "Ninebot MAX G30",
                            Name = "Segway Explorer",
                            IsFoldable = false
                        },
                        new
                        {
                            Id = new Guid("81fd7101-d207-42b3-97c2-bfc2f67c9bda"),
                            ApplicationUserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            BatteryCapacity = 18000.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 1,
                            Manufacturer = "Kaabo",
                            MaxChargingSpeed = 1.2,
                            Model = "Mantis 10 Pro",
                            Name = "Mantis Sárkány",
                            IsFoldable = true
                        },
                        new
                        {
                            Id = new Guid("1cc80793-209f-4619-908e-0a580f5525db"),
                            ApplicationUserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            BatteryCapacity = 36000.0,
                            BatteryVoltage = 60.0,
                            DeviceType = 1,
                            Manufacturer = "Dualtron",
                            MaxChargingSpeed = 2.5,
                            Model = "Thunder 2",
                            Name = "Thunder Viharjáró",
                            IsFoldable = false
                        },
                        new
                        {
                            Id = new Guid("8721f5b0-cf96-4a80-aa1b-7b343be48af2"),
                            ApplicationUserId = new Guid("cfd11ce4-29ba-43ef-b3e6-f7dc8a76f847"),
                            BatteryCapacity = 10400.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 1,
                            Manufacturer = "E-TWOW",
                            MaxChargingSpeed = 0.40000000000000002,
                            Model = "GT SE",
                            Name = "GT Kompakt",
                            IsFoldable = true
                        },
                        new
                        {
                            Id = new Guid("235a36c1-fec9-4c33-b0cb-85423990a137"),
                            ApplicationUserId = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            BatteryCapacity = 12800.0,
                            BatteryVoltage = 48.0,
                            DeviceType = 1,
                            Manufacturer = "NIU",
                            MaxChargingSpeed = 0.59999999999999998,
                            Model = "KQi3 Pro",
                            Name = "NIU Futár",
                            IsFoldable = true
                        },
                        new
                        {
                            Id = new Guid("c935f07a-263d-4be1-a3e6-99554f670aff"),
                            ApplicationUserId = new Guid("8dfc4275-dee6-4da0-adf8-d9b1afaf9299"),
                            BatteryCapacity = 25200.0,
                            BatteryVoltage = 60.0,
                            DeviceType = 1,
                            Manufacturer = "Apollo",
                            MaxChargingSpeed = 1.8,
                            Model = "Phantom V3",
                            Name = "Phantom Erőgép",
                            IsFoldable = false
                        });
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.ESkateBoard", b =>
                {
                    b.HasBaseType("PipeLine.Shared.Models.DeviceModels.Device");

                    b.Property<bool>("CanBeLocked")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("ESkateBoard");

                    b.HasData(
                        new
                        {
                            Id = new Guid("659a4302-241a-45ba-9a7a-6d1aba3c8b71"),
                            ApplicationUserId = new Guid("78999ea0-6338-4a00-b990-8c2f32e1393c"),
                            BatteryCapacity = 19900.0,
                            BatteryVoltage = 44.0,
                            DeviceType = 2,
                            Manufacturer = "Boosted",
                            MaxChargingSpeed = 0.5,
                            Model = "Boosted Stealth",
                            Name = "Boosted Beast",
                            CanBeLocked = false
                        },
                        new
                        {
                            Id = new Guid("3f6eb602-3135-4ec1-b619-0c67e72c3637"),
                            ApplicationUserId = new Guid("93233682-756a-4ca3-8759-e4ec37182f29"),
                            BatteryCapacity = 14400.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 2,
                            Manufacturer = "Meepo",
                            MaxChargingSpeed = 0.40000000000000002,
                            Model = "Meepo V4 Shuffle",
                            Name = "Meepo Cruiser",
                            CanBeLocked = true
                        },
                        new
                        {
                            Id = new Guid("bb2868d7-1f6a-4651-aaca-8178c172590b"),
                            ApplicationUserId = new Guid("dd6f6963-4229-4921-a26f-06f5f221ff1b"),
                            BatteryCapacity = 18000.0,
                            BatteryVoltage = 44.0,
                            DeviceType = 2,
                            Manufacturer = "Evolve",
                            MaxChargingSpeed = 0.59999999999999998,
                            Model = "Bamboo GTR",
                            Name = "Evolve Off-Road",
                            CanBeLocked = true
                        },
                        new
                        {
                            Id = new Guid("bd3cb4d1-4d28-44d5-bd28-dc167f8e121f"),
                            ApplicationUserId = new Guid("8dfc4275-dee6-4da0-adf8-d9b1afaf9299"),
                            BatteryCapacity = 15000.0,
                            BatteryVoltage = 36.0,
                            DeviceType = 2,
                            Manufacturer = "WowGo",
                            MaxChargingSpeed = 0.5,
                            Model = "WowGo 3X",
                            Name = "WowGo Speedster",
                            CanBeLocked = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PipeLine.Shared.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingInstanceModels.ChargingInstance", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.ChargingStationModels.ChargingPortModel.ChargingPort", "ChargingPort")
                        .WithMany("ChargingInstances")
                        .HasForeignKey("ChargingPortId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PipeLine.Shared.Models.DeviceModels.Device", "Device")
                        .WithMany("ChargingInstances")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ChargingPort");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingStationModels.ChargingPortModel.ChargingPort", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.ChargingStationModels.ChargingStation", "ChargingStation")
                        .WithMany("Ports")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.Device", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.UserModels.ApplicationUser", "ApplicationUser")
                        .WithMany("Devices")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ErrorTicketModels.ErrorTicket", b =>
                {
                    b.HasOne("PipeLine.Shared.Models.ChargingStationModels.ChargingStation", "ChargingStation")
                        .WithMany("ErrorTickets")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingStationModels.ChargingPortModel.ChargingPort", b =>
                {
                    b.Navigation("ChargingInstances");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.ChargingStationModels.ChargingStation", b =>
                {
                    b.Navigation("ErrorTickets");

                    b.Navigation("Ports");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.DeviceModels.Device", b =>
                {
                    b.Navigation("ChargingInstances");
                });

            modelBuilder.Entity("PipeLine.Shared.Models.UserModels.ApplicationUser", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
